#!/usr/bin/env python3
#-*- coding: utf-8 -*-


# 객체지향 프로그래밍은 어렵습니다. 이유는 개념과 용어가 많고 거기에 익숙하기 까지 시간이 오래 걸립니다. 
# (It is difficult to understand object-oriented programming becuase there are so many concept, definition and terms.)
#
# 객체지향 관련해서만 다양한 책이 존재합니다. 
# Class 개념이 나옵니다. (그런줄로만 이해) Class라는 개념은 일종의 붕어빵을 만들 때의, 붕어빵 틀이라고 생각하면 쉽습니다.
# 인스턴스는 붕어빵이라고 생각합니다. 
#
#
# 클래스에는 그들만의 멤버들을 가지고 있습니다. 
# 클래스는 클래스 내부의 이름공간(Namespace)을 가집니다. 
# 마치 붕어빵의 팥, 크림처럼, 클래스 내부의 함수를 멤버함수 또는 (객체지향에서는 주로)메쏘드라고 부릅니다. 
# 또한, 변수도 멤버변수라고 부르며, 글로벌변수와 멤버변수와 구분이 되며, 클래스 내부에서 멤버변수, (함수 내의) 로컬변수로 구분되어 집니다.
#
# 클래스(붕어빵틀)은 그 자체 만으로는 사용할 수 없기 때문에, '붕어빵틀'을 먹는 것이 아니라 '붕어빵'을 먹어야 하기 때문에 실체를 만듭니다. 
# 우리는 이 실체를 인스턴스라 부릅니다. 인스턴스를 가지고 팥/크림 등을 맛을 볼 수 있습니다.



# 클래스 정의(붕어빵을 만들기 위한 틀 선언/정의)
class MyClass:
    # 멤버변수
    var = 'Hello'
    
    # 멤버함수, 앞으로는 메쏘드라고 부릅니다. 
    # 메쏘드의 첫 번째 argument는 self입니다. 문법이라 꼭 지킵니다. 호출할 때는 argument가 없어도 됩니다.
    # 이 self는 인스턴스를 가르킵니다. 
    def sayHello(self):
        print(self.var)


obj = MyClass()     # MyClass라는 인스턴스(붕어빵)
print(obj.var)      # 붕어빵의 팥맛이 어떤지 볼까요?
obj.sayHello()      # 붕어빵의 팥맛이 어떤지 볼까요?